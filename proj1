package university;

import java.util.ArrayList;

/*
 * University provides several basic course services in a University, including
 * add courses,  cancel courses, drop courses,etc.
 */

public class University {

   private ArrayList<Course> totalCourses; // courses' list

   /*
    * a default constructor create a new empty courses' list
    */
   public University() {
      totalCourses = new ArrayList<Course>();
   }

   /*
    * add course in to University according to its department and number
    * 
    * @param the department name of the course
    * 
    * @param the number of the course
    * 
    * @param the number of seats in the course
    * 
    * @return the current object, University
    */
   public University addCourse(String department, int number, int numSeats) {
      Course c = new Course(department, number, numSeats);
      if (finder(c)) {
         return this;
      }
      totalCourses.add(c);
      return this;
   }

   /*
    * remove a already existed course in the University
    * 
    * @param the department name of the course
    * 
    * @param the number of the course
    * 
    * @return true if the course got remove from the University
    */
   public boolean cancelCourse(String department, int number) {
      Course find = finder(department, number);
      if (find != null) {
         totalCourses.remove(find);
         return true;
      }

      return false;
   }

   /*
    * get the number of existed course in the University
    * 
    * @return the size of the course list in a University
    */
   public int numCourses() {
      return totalCourses.size();
   }

   /*
    * add a student in a course in a University
    * 
    * @param the department name of the course
    * 
    * @param the number of the course
    * 
    * @param the name of the student who is going to register
    * 
    * @return true if the student successfully register
    */
   public boolean add(String department, int number, String name) {
      Course currentCourse = finder(department, number);

      // is not currently storing a course
      if (currentCourse == null) {
         return false;
      }

      // same student
      else if (currentCourse.findIddenticalStudent(name) != null) {
         return false;
      }

      // number of seats
      else if (currentCourse.getNumberOfSeats() <= currentCourse
            .getNumberOfStudents()) {
         return false;
      }

      // more than 5 courses
      else if (numCoursesRegisteredFor(name) >= 5) {
         return false;
      }

      // successfully add student into the class
      else {
         currentCourse.addStudentName(name);
         return true;
      }
   }

   /*
    * find the number of the student in a specific course
    * 
    * @param the department name of the course
    * 
    * @param the course number
    * 
    * @return the number of the students in the current course
    */
   public int numStudentsInCourse(String department, int number) {
      Course find = finder(department, number);
      if (find != null) {
         return find.getNumberOfStudents();
      }
      return -1;
   }

   /*
    * check whether the student has already register for the course
    * 
    * @param the department name of the course
    * 
    * @param the number of the course
    * 
    * @param the name of the student
    * 
    * @return true if the current course exists and the student can be found in
    * the course
    */
   public boolean isRegisteredForCourse(String department, int number,
         String name) {
      Course currentCourse = finder(department, number);
      if (currentCourse == null) {
         return false;
      } else if (currentCourse.findIddenticalStudent(name) == null) {
         return false;
      }
      return true;

   }

   /*
    * to get the number of the courses that a student has registered
    * 
    * @param student name
    * 
    * @return the number of the registered courses
    */
   public int numCoursesRegisteredFor(String name) {

      int num = 0;
      for (int i = 0; i < totalCourses.size(); i++) {
         if (((totalCourses.get(i))).findIddenticalStudent(name) != null) {
            num++;
         }
      }
      return num;
   }

   /*
    * to help the student to drop a course in a University
    * 
    * @param the name of the course that is going to be dropped
    * 
    * @param the number of the course that is going to be dropped
    * 
    * @param the name of the student who is going to drop the course
    * 
    * @return true if the student's name successfully be removed form the course
    */
   public boolean drop(String department, int number, String name) {
      Course currentCourse = finder(department, number);
      // does not currently have a course with that number
      if (currentCourse == null) {
         return false;
      }

      else if (currentCourse.findIddenticalStudent(name) == null) {
         return false;
      }
      currentCourse.removeStudentName(name);
      return true;
   }

   /*
    * to help the student to drop all the courses in a University
    * 
    * @param the name of the current student
    * 
    * @return true if the student successfully drop all the course in a
    * University
    */
   public boolean cancelRegistration(String name) {
      int numToCancel = 0;
      for (int i = 0; i < totalCourses.size(); i++) {
         if (totalCourses.get(i).findIddenticalStudent(name) != null) {
            drop(totalCourses.get(i).getDepartment(), totalCourses.get(i)
                  .getNumber(), name);
            numToCancel++;
         }
      }
      if (numToCancel != 0) {
         return true;
      }
      return false;
   }

   /*
    * to search a specific course in the university and see if it exist
    * 
    * @param course object that needed to be find
    * 
    * @return true if it find the course has already existed in the University
    */
   private boolean finder(Course course) {
      for (int i = 0; i < totalCourses.size(); i++) {
         if ((totalCourses.get(i)).getNumber() == course.getNumber()
               && (totalCourses.get(i)).getDepartment().equals(
                     course.getDepartment()))
            return true;
      }

      return false;
   }

   /*
    * to find a specific course in the University according to its department
    * and number
    * 
    * @param department name of the course
    * 
    * @param the number of the course
    * 
    * @return the course that you are looking for
    * 
    * @return null if the course is not be found
    */
 
   private Course finder(String department, int number) {
      for (int i = 0; i < totalCourses.size(); i++) {
         if ((totalCourses.get(i)).getNumber() == number
               && (totalCourses.get(i)).getDepartment().equals(department))
            return totalCourses.get(i);
      }
      return null;
   }
   

}
